// Code generated by MockGen. DO NOT EDIT.
// Source: /home/bxd/bxdsh/TikTok/apps/user/rpc/userclient/user.go

// Package mock_userclient is a generated GoMock package.
package mock

import (
	userclient "TikTok/apps/user/rpc/userclient"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockUser is a mock of User interface.
type MockUser struct {
	ctrl     *gomock.Controller
	recorder *MockUserMockRecorder
}

// MockUserMockRecorder is the mock recorder for MockUser.
type MockUserMockRecorder struct {
	mock *MockUser
}

// NewMockUser creates a new mock instance.
func NewMockUser(ctrl *gomock.Controller) *MockUser {
	mock := &MockUser{ctrl: ctrl}
	mock.recorder = &MockUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUser) EXPECT() *MockUserMockRecorder {
	return m.recorder
}

// Detail mocks base method.
func (m *MockUser) Detail(ctx context.Context, in *userclient.BasicUserInfoReq, opts ...grpc.CallOption) (*userclient.BasicUserInfoResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Detail", varargs...)
	ret0, _ := ret[0].(*userclient.BasicUserInfoResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Detail indicates an expected call of Detail.
func (mr *MockUserMockRecorder) Detail(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Detail", reflect.TypeOf((*MockUser)(nil).Detail), varargs...)
}

// Login mocks base method.
func (m *MockUser) Login(ctx context.Context, in *userclient.LoginReq, opts ...grpc.CallOption) (*userclient.LoginResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Login", varargs...)
	ret0, _ := ret[0].(*userclient.LoginResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockUserMockRecorder) Login(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockUser)(nil).Login), varargs...)
}

// Register mocks base method.
func (m *MockUser) Register(ctx context.Context, in *userclient.RegisterReq, opts ...grpc.CallOption) (*userclient.RegisterResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Register", varargs...)
	ret0, _ := ret[0].(*userclient.RegisterResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockUserMockRecorder) Register(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockUser)(nil).Register), varargs...)
}

// SetAvatar mocks base method.
func (m *MockUser) SetAvatar(ctx context.Context, in *userclient.SetAvatarReq, opts ...grpc.CallOption) (*userclient.SetAvatarResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetAvatar", varargs...)
	ret0, _ := ret[0].(*userclient.SetAvatarResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetAvatar indicates an expected call of SetAvatar.
func (mr *MockUserMockRecorder) SetAvatar(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAvatar", reflect.TypeOf((*MockUser)(nil).SetAvatar), varargs...)
}

// SetBackgroundImage mocks base method.
func (m *MockUser) SetBackgroundImage(ctx context.Context, in *userclient.BackgroundImageReq, opts ...grpc.CallOption) (*userclient.BackgroundImageResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetBackgroundImage", varargs...)
	ret0, _ := ret[0].(*userclient.BackgroundImageResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetBackgroundImage indicates an expected call of SetBackgroundImage.
func (mr *MockUserMockRecorder) SetBackgroundImage(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBackgroundImage", reflect.TypeOf((*MockUser)(nil).SetBackgroundImage), varargs...)
}
