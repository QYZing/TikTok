// Code generated by MockGen. DO NOT EDIT.
// Source: /home/bxd/bxdsh/TikTok/apps/social/rpc/socialclient/social.go

// Package test is a generated GoMock package.
package mock

import (
	socialclient "TikTok/apps/social/rpc/socialclient"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockSocial is a mock of Social interface.
type MockSocial struct {
	ctrl     *gomock.Controller
	recorder *MockSocialMockRecorder
}

// MockSocialMockRecorder is the mock recorder for MockSocial.
type MockSocialMockRecorder struct {
	mock *MockSocial
}

// NewMockSocial creates a new mock instance.
func NewMockSocial(ctrl *gomock.Controller) *MockSocial {
	mock := &MockSocial{ctrl: ctrl}
	mock.recorder = &MockSocialMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSocial) EXPECT() *MockSocialMockRecorder {
	return m.recorder
}

// GetFollowCount mocks base method.
func (m *MockSocial) GetFollowCount(ctx context.Context, in *socialclient.FollowCountReq, opts ...grpc.CallOption) (*socialclient.FollowCountResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFollowCount", varargs...)
	ret0, _ := ret[0].(*socialclient.FollowCountResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFollowCount indicates an expected call of GetFollowCount.
func (mr *MockSocialMockRecorder) GetFollowCount(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFollowCount", reflect.TypeOf((*MockSocial)(nil).GetFollowCount), varargs...)
}

// GetFollowerCount mocks base method.
func (m *MockSocial) GetFollowerCount(ctx context.Context, in *socialclient.FollowerCountReq, opts ...grpc.CallOption) (*socialclient.FollowerCountResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFollowerCount", varargs...)
	ret0, _ := ret[0].(*socialclient.FollowerCountResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFollowerCount indicates an expected call of GetFollowerCount.
func (mr *MockSocialMockRecorder) GetFollowerCount(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFollowerCount", reflect.TypeOf((*MockSocial)(nil).GetFollowerCount), varargs...)
}

// GetMessages mocks base method.
func (m *MockSocial) GetMessages(ctx context.Context, in *socialclient.MessageChatReq, opts ...grpc.CallOption) (*socialclient.MessageChatResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMessages", varargs...)
	ret0, _ := ret[0].(*socialclient.MessageChatResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessages indicates an expected call of GetMessages.
func (mr *MockSocialMockRecorder) GetMessages(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessages", reflect.TypeOf((*MockSocial)(nil).GetMessages), varargs...)
}

// GetRelationFollowList mocks base method.
func (m *MockSocial) GetRelationFollowList(ctx context.Context, in *socialclient.RelationFollowListReq, opts ...grpc.CallOption) (*socialclient.RelationFollowListResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRelationFollowList", varargs...)
	ret0, _ := ret[0].(*socialclient.RelationFollowListResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelationFollowList indicates an expected call of GetRelationFollowList.
func (mr *MockSocialMockRecorder) GetRelationFollowList(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelationFollowList", reflect.TypeOf((*MockSocial)(nil).GetRelationFollowList), varargs...)
}

// GetRelationFollowerList mocks base method.
func (m *MockSocial) GetRelationFollowerList(ctx context.Context, in *socialclient.RelationFollowerListReq, opts ...grpc.CallOption) (*socialclient.RelationFollowerListResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRelationFollowerList", varargs...)
	ret0, _ := ret[0].(*socialclient.RelationFollowerListResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelationFollowerList indicates an expected call of GetRelationFollowerList.
func (mr *MockSocialMockRecorder) GetRelationFollowerList(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelationFollowerList", reflect.TypeOf((*MockSocial)(nil).GetRelationFollowerList), varargs...)
}

// GetRelationFriendList mocks base method.
func (m *MockSocial) GetRelationFriendList(ctx context.Context, in *socialclient.RelationFriendListReq, opts ...grpc.CallOption) (*socialclient.RelationFriendListResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRelationFriendList", varargs...)
	ret0, _ := ret[0].(*socialclient.RelationFriendListResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelationFriendList indicates an expected call of GetRelationFriendList.
func (mr *MockSocialMockRecorder) GetRelationFriendList(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelationFriendList", reflect.TypeOf((*MockSocial)(nil).GetRelationFriendList), varargs...)
}

// IsFollow mocks base method.
func (m *MockSocial) IsFollow(ctx context.Context, in *socialclient.IsFollowReq, opts ...grpc.CallOption) (*socialclient.IsFollowResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IsFollow", varargs...)
	ret0, _ := ret[0].(*socialclient.IsFollowResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsFollow indicates an expected call of IsFollow.
func (mr *MockSocialMockRecorder) IsFollow(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsFollow", reflect.TypeOf((*MockSocial)(nil).IsFollow), varargs...)
}

// SendMessageAction mocks base method.
func (m *MockSocial) SendMessageAction(ctx context.Context, in *socialclient.MessageActionReq, opts ...grpc.CallOption) (*socialclient.MessageActionResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendMessageAction", varargs...)
	ret0, _ := ret[0].(*socialclient.MessageActionResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendMessageAction indicates an expected call of SendMessageAction.
func (mr *MockSocialMockRecorder) SendMessageAction(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessageAction", reflect.TypeOf((*MockSocial)(nil).SendMessageAction), varargs...)
}

// SendRelationAction mocks base method.
func (m *MockSocial) SendRelationAction(ctx context.Context, in *socialclient.RelationActionReq, opts ...grpc.CallOption) (*socialclient.RelationActionResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendRelationAction", varargs...)
	ret0, _ := ret[0].(*socialclient.RelationActionResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendRelationAction indicates an expected call of SendRelationAction.
func (mr *MockSocialMockRecorder) SendRelationAction(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendRelationAction", reflect.TypeOf((*MockSocial)(nil).SendRelationAction), varargs...)
}
