// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: interaction.proto

package interaction

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Interaction_IsFavorite_FullMethodName                = "/interaction.interaction/IsFavorite"
	Interaction_GetFavoriteCountByUserId_FullMethodName  = "/interaction.interaction/GetFavoriteCountByUserId"
	Interaction_GetFavoriteCountByVideoId_FullMethodName = "/interaction.interaction/GetFavoriteCountByVideoId"
	Interaction_GetCommentCountByVideoId_FullMethodName  = "/interaction.interaction/GetCommentCountByVideoId"
	Interaction_SendFavoriteAction_FullMethodName        = "/interaction.interaction/SendFavoriteAction"
	Interaction_GetFavoriteList_FullMethodName           = "/interaction.interaction/GetFavoriteList"
	Interaction_SendCommentAction_FullMethodName         = "/interaction.interaction/SendCommentAction"
	Interaction_GetCommentList_FullMethodName            = "/interaction.interaction/GetCommentList"
)

// InteractionClient is the client API for Interaction service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InteractionClient interface {
	IsFavorite(ctx context.Context, in *IsFavoriteReq, opts ...grpc.CallOption) (*IsFavoriteResp, error)
	GetFavoriteCountByUserId(ctx context.Context, in *FavoriteCountByUserIdReq, opts ...grpc.CallOption) (*FavoriteCountByUserIdResp, error)
	GetFavoriteCountByVideoId(ctx context.Context, in *FavoriteCountByVideoIdReq, opts ...grpc.CallOption) (*FavoriteCountByVideoIdResp, error)
	GetCommentCountByVideoId(ctx context.Context, in *CommentCountByVideoIdReq, opts ...grpc.CallOption) (*CommentCountByVideoIdResp, error)
	SendFavoriteAction(ctx context.Context, in *FavoriteActionReq, opts ...grpc.CallOption) (*FavoriteActionResp, error)
	GetFavoriteList(ctx context.Context, in *FavoriteListReq, opts ...grpc.CallOption) (*FavoriteListResp, error)
	SendCommentAction(ctx context.Context, in *CommentActionReq, opts ...grpc.CallOption) (*CommentActionResp, error)
	GetCommentList(ctx context.Context, in *CommentListReq, opts ...grpc.CallOption) (*CommentListResp, error)
}

type interactionClient struct {
	cc grpc.ClientConnInterface
}

func NewInteractionClient(cc grpc.ClientConnInterface) InteractionClient {
	return &interactionClient{cc}
}

func (c *interactionClient) IsFavorite(ctx context.Context, in *IsFavoriteReq, opts ...grpc.CallOption) (*IsFavoriteResp, error) {
	out := new(IsFavoriteResp)
	err := c.cc.Invoke(ctx, Interaction_IsFavorite_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interactionClient) GetFavoriteCountByUserId(ctx context.Context, in *FavoriteCountByUserIdReq, opts ...grpc.CallOption) (*FavoriteCountByUserIdResp, error) {
	out := new(FavoriteCountByUserIdResp)
	err := c.cc.Invoke(ctx, Interaction_GetFavoriteCountByUserId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interactionClient) GetFavoriteCountByVideoId(ctx context.Context, in *FavoriteCountByVideoIdReq, opts ...grpc.CallOption) (*FavoriteCountByVideoIdResp, error) {
	out := new(FavoriteCountByVideoIdResp)
	err := c.cc.Invoke(ctx, Interaction_GetFavoriteCountByVideoId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interactionClient) GetCommentCountByVideoId(ctx context.Context, in *CommentCountByVideoIdReq, opts ...grpc.CallOption) (*CommentCountByVideoIdResp, error) {
	out := new(CommentCountByVideoIdResp)
	err := c.cc.Invoke(ctx, Interaction_GetCommentCountByVideoId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interactionClient) SendFavoriteAction(ctx context.Context, in *FavoriteActionReq, opts ...grpc.CallOption) (*FavoriteActionResp, error) {
	out := new(FavoriteActionResp)
	err := c.cc.Invoke(ctx, Interaction_SendFavoriteAction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interactionClient) GetFavoriteList(ctx context.Context, in *FavoriteListReq, opts ...grpc.CallOption) (*FavoriteListResp, error) {
	out := new(FavoriteListResp)
	err := c.cc.Invoke(ctx, Interaction_GetFavoriteList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interactionClient) SendCommentAction(ctx context.Context, in *CommentActionReq, opts ...grpc.CallOption) (*CommentActionResp, error) {
	out := new(CommentActionResp)
	err := c.cc.Invoke(ctx, Interaction_SendCommentAction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interactionClient) GetCommentList(ctx context.Context, in *CommentListReq, opts ...grpc.CallOption) (*CommentListResp, error) {
	out := new(CommentListResp)
	err := c.cc.Invoke(ctx, Interaction_GetCommentList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InteractionServer is the server API for Interaction service.
// All implementations must embed UnimplementedInteractionServer
// for forward compatibility
type InteractionServer interface {
	IsFavorite(context.Context, *IsFavoriteReq) (*IsFavoriteResp, error)
	GetFavoriteCountByUserId(context.Context, *FavoriteCountByUserIdReq) (*FavoriteCountByUserIdResp, error)
	GetFavoriteCountByVideoId(context.Context, *FavoriteCountByVideoIdReq) (*FavoriteCountByVideoIdResp, error)
	GetCommentCountByVideoId(context.Context, *CommentCountByVideoIdReq) (*CommentCountByVideoIdResp, error)
	SendFavoriteAction(context.Context, *FavoriteActionReq) (*FavoriteActionResp, error)
	GetFavoriteList(context.Context, *FavoriteListReq) (*FavoriteListResp, error)
	SendCommentAction(context.Context, *CommentActionReq) (*CommentActionResp, error)
	GetCommentList(context.Context, *CommentListReq) (*CommentListResp, error)
	mustEmbedUnimplementedInteractionServer()
}

// UnimplementedInteractionServer must be embedded to have forward compatible implementations.
type UnimplementedInteractionServer struct {
}

func (UnimplementedInteractionServer) IsFavorite(context.Context, *IsFavoriteReq) (*IsFavoriteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsFavorite not implemented")
}
func (UnimplementedInteractionServer) GetFavoriteCountByUserId(context.Context, *FavoriteCountByUserIdReq) (*FavoriteCountByUserIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFavoriteCountByUserId not implemented")
}
func (UnimplementedInteractionServer) GetFavoriteCountByVideoId(context.Context, *FavoriteCountByVideoIdReq) (*FavoriteCountByVideoIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFavoriteCountByVideoId not implemented")
}
func (UnimplementedInteractionServer) GetCommentCountByVideoId(context.Context, *CommentCountByVideoIdReq) (*CommentCountByVideoIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommentCountByVideoId not implemented")
}
func (UnimplementedInteractionServer) SendFavoriteAction(context.Context, *FavoriteActionReq) (*FavoriteActionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendFavoriteAction not implemented")
}
func (UnimplementedInteractionServer) GetFavoriteList(context.Context, *FavoriteListReq) (*FavoriteListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFavoriteList not implemented")
}
func (UnimplementedInteractionServer) SendCommentAction(context.Context, *CommentActionReq) (*CommentActionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendCommentAction not implemented")
}
func (UnimplementedInteractionServer) GetCommentList(context.Context, *CommentListReq) (*CommentListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommentList not implemented")
}
func (UnimplementedInteractionServer) mustEmbedUnimplementedInteractionServer() {}

// UnsafeInteractionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InteractionServer will
// result in compilation errors.
type UnsafeInteractionServer interface {
	mustEmbedUnimplementedInteractionServer()
}

func RegisterInteractionServer(s grpc.ServiceRegistrar, srv InteractionServer) {
	s.RegisterService(&Interaction_ServiceDesc, srv)
}

func _Interaction_IsFavorite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsFavoriteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractionServer).IsFavorite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Interaction_IsFavorite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractionServer).IsFavorite(ctx, req.(*IsFavoriteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Interaction_GetFavoriteCountByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FavoriteCountByUserIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractionServer).GetFavoriteCountByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Interaction_GetFavoriteCountByUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractionServer).GetFavoriteCountByUserId(ctx, req.(*FavoriteCountByUserIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Interaction_GetFavoriteCountByVideoId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FavoriteCountByVideoIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractionServer).GetFavoriteCountByVideoId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Interaction_GetFavoriteCountByVideoId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractionServer).GetFavoriteCountByVideoId(ctx, req.(*FavoriteCountByVideoIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Interaction_GetCommentCountByVideoId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentCountByVideoIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractionServer).GetCommentCountByVideoId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Interaction_GetCommentCountByVideoId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractionServer).GetCommentCountByVideoId(ctx, req.(*CommentCountByVideoIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Interaction_SendFavoriteAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FavoriteActionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractionServer).SendFavoriteAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Interaction_SendFavoriteAction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractionServer).SendFavoriteAction(ctx, req.(*FavoriteActionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Interaction_GetFavoriteList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FavoriteListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractionServer).GetFavoriteList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Interaction_GetFavoriteList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractionServer).GetFavoriteList(ctx, req.(*FavoriteListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Interaction_SendCommentAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentActionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractionServer).SendCommentAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Interaction_SendCommentAction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractionServer).SendCommentAction(ctx, req.(*CommentActionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Interaction_GetCommentList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractionServer).GetCommentList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Interaction_GetCommentList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractionServer).GetCommentList(ctx, req.(*CommentListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Interaction_ServiceDesc is the grpc.ServiceDesc for Interaction service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Interaction_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "interaction.interaction",
	HandlerType: (*InteractionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IsFavorite",
			Handler:    _Interaction_IsFavorite_Handler,
		},
		{
			MethodName: "GetFavoriteCountByUserId",
			Handler:    _Interaction_GetFavoriteCountByUserId_Handler,
		},
		{
			MethodName: "GetFavoriteCountByVideoId",
			Handler:    _Interaction_GetFavoriteCountByVideoId_Handler,
		},
		{
			MethodName: "GetCommentCountByVideoId",
			Handler:    _Interaction_GetCommentCountByVideoId_Handler,
		},
		{
			MethodName: "SendFavoriteAction",
			Handler:    _Interaction_SendFavoriteAction_Handler,
		},
		{
			MethodName: "GetFavoriteList",
			Handler:    _Interaction_GetFavoriteList_Handler,
		},
		{
			MethodName: "SendCommentAction",
			Handler:    _Interaction_SendCommentAction_Handler,
		},
		{
			MethodName: "GetCommentList",
			Handler:    _Interaction_GetCommentList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "interaction.proto",
}
