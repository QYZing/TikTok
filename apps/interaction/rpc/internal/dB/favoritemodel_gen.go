// Code generated by goctl. DO NOT EDIT.

package dB

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	favoriteFieldNames          = builder.RawFieldNames(&Favorite{})
	favoriteRows                = strings.Join(favoriteFieldNames, ",")
	favoriteRowsExpectAutoSet   = strings.Join(stringx.Remove(favoriteFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	favoriteRowsWithPlaceHolder = strings.Join(stringx.Remove(favoriteFieldNames, "`userId`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	favoriteModel interface {
		Insert(ctx context.Context, data *Favorite) (sql.Result, error)
		FindVideos(ctx context.Context, userId int64) ([]int64, error)
		Update(ctx context.Context, data *Favorite) error
		Delete(ctx context.Context, userId , videoId int64 ) error

		IsExist(ctx context.Context , userId , videoId int64)(bool , error)//检查用户是否给视频点赞
		userORvideoCount(ctx context.Context , Id int64 , userORvideo bool)(int64 , error)//用户/视频点赞数量
	}

	defaultFavoriteModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Favorite struct {
		UserId  int64 `db:"userId"`
		VideoId int64 `db:"videoId"`
	}
)

func newFavoriteModel(conn sqlx.SqlConn) *defaultFavoriteModel {
	return &defaultFavoriteModel{
		conn:  conn,
		table: "`favorite`",
	}
}

func (m *defaultFavoriteModel) withSession(session sqlx.Session) *defaultFavoriteModel {
	return &defaultFavoriteModel{
		conn:  sqlx.NewSqlConnFromSession(session),
		table: "`favorite`",
	}
}

func (m *defaultFavoriteModel) Delete(ctx context.Context, userId ,videoId int64) error {
	query := fmt.Sprintf("delete from %s where `userId` = ? and videoId = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, userId ,videoId)
	return err
}
//查看用户点赞视频id列表
func (m *defaultFavoriteModel) FindVideos(ctx context.Context, userId int64) ([]int64, error) {
	query := fmt.Sprintf("select videoId from %s where `userId` = ? ", m.table)
	var resp []int64
	err := m.conn.QueryRowsCtx(ctx,&resp , query , userId)
	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}
// 检查是否存在user和video之间的联系
func (m *defaultFavoriteModel) IsExist(ctx context.Context , userId , videoId int64)(bool , error){
	query := fmt.Sprintf("select %s from %s where `userId` = ? and videoId = ? ", favoriteRows, m.table)
	var resp Favorite
	err := m.conn.QueryRowCtx(ctx, &resp, query, userId , videoId)
	switch err {
	case nil:
		return true, nil
	case sqlc.ErrNotFound:
		return false, ErrNotFound
	default:
		return false, err
	}
}
//查看用户点赞数量 true : user false : video
func (m *defaultFavoriteModel) userORvideoCount(ctx context.Context , Id int64 , userORvideo bool)(int64 , error){
	var obj string
	if userORvideo{
		obj = "userId"
	}else{
		obj = "videoId"
	}
	query := fmt.Sprintf("select count(*) from %s where `%s` = ?  ", m.table , obj)
	var resp int64
	err := m.conn.QueryRowCtx(ctx, &resp, query, Id)
	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return 0, ErrNotFound
	default:
		return 0, err
	}
}

func (m *defaultFavoriteModel) Insert(ctx context.Context, data *Favorite) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, favoriteRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.UserId, data.VideoId)
	return ret, err
}

func (m *defaultFavoriteModel) Update(ctx context.Context, data *Favorite) error {
	query := fmt.Sprintf("update %s set %s where `userId` = ?", m.table, favoriteRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.VideoId, data.UserId)
	return err
}

func (m *defaultFavoriteModel) tableName() string {
	return m.table
}
