// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	videoStatsFieldNames          = builder.RawFieldNames(&VideoStats{})
	videoStatsRows                = strings.Join(videoStatsFieldNames, ",")
	videoStatsRowsExpectAutoSet   = strings.Join(stringx.Remove(videoStatsFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	videoStatsRowsWithPlaceHolder = strings.Join(stringx.Remove(videoStatsFieldNames, "`video_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheVideoStatsVideoIdPrefix = "cache:videoStats:videoId:"
)

type (
	videoStatsModel interface {
		Insert(ctx context.Context, data *VideoStats) (sql.Result, error)
		FindOne(ctx context.Context, videoId int64) (*VideoStats, error)
		Update(ctx context.Context, data *VideoStats) error
		Delete(ctx context.Context, videoId int64) error
	}

	defaultVideoStatsModel struct {
		sqlc.CachedConn
		table string
	}

	VideoStats struct {
		VideoId      int64 `db:"video_id"`      // 视频id
		LikeCount    int64 `db:"like_count"`    // 视频获赞数
		CommentCount int64 `db:"comment_count"` // 视频评论数
	}
)

func newVideoStatsModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultVideoStatsModel {
	return &defaultVideoStatsModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`video_stats`",
	}
}

func (m *defaultVideoStatsModel) withSession(session sqlx.Session) *defaultVideoStatsModel {
	return &defaultVideoStatsModel{
		CachedConn: m.CachedConn.WithSession(session),
		table:      "`video_stats`",
	}
}

func (m *defaultVideoStatsModel) Delete(ctx context.Context, videoId int64) error {
	videoStatsVideoIdKey := fmt.Sprintf("%s%v", cacheVideoStatsVideoIdPrefix, videoId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `video_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, videoId)
	}, videoStatsVideoIdKey)
	return err
}

func (m *defaultVideoStatsModel) FindOne(ctx context.Context, videoId int64) (*VideoStats, error) {
	videoStatsVideoIdKey := fmt.Sprintf("%s%v", cacheVideoStatsVideoIdPrefix, videoId)
	var resp VideoStats
	err := m.QueryRowCtx(ctx, &resp, videoStatsVideoIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `video_id` = ? limit 1", videoStatsRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, videoId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultVideoStatsModel) Insert(ctx context.Context, data *VideoStats) (sql.Result, error) {
	videoStatsVideoIdKey := fmt.Sprintf("%s%v", cacheVideoStatsVideoIdPrefix, data.VideoId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, videoStatsRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.VideoId, data.LikeCount, data.CommentCount)
	}, videoStatsVideoIdKey)
	return ret, err
}

func (m *defaultVideoStatsModel) Update(ctx context.Context, data *VideoStats) error {
	videoStatsVideoIdKey := fmt.Sprintf("%s%v", cacheVideoStatsVideoIdPrefix, data.VideoId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `video_id` = ?", m.table, videoStatsRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.LikeCount, data.CommentCount, data.VideoId)
	}, videoStatsVideoIdKey)
	return err
}

func (m *defaultVideoStatsModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheVideoStatsVideoIdPrefix, primary)
}

func (m *defaultVideoStatsModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `video_id` = ? limit 1", videoStatsRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultVideoStatsModel) tableName() string {
	return m.table
}
