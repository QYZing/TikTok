// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	commentFieldNames          = builder.RawFieldNames(&Comment{})
	commentRows                = strings.Join(commentFieldNames, ",")
	commentRowsExpectAutoSet   = strings.Join(stringx.Remove(commentFieldNames, "`comment_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	commentRowsWithPlaceHolder = strings.Join(stringx.Remove(commentFieldNames, "`comment_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheCommentCommentIdPrefix       = "cache:comment:commentId:"
	cacheCommentCommentIdUserIdPrefix = "cache:comment:commentId:userId:"
)

type (
	commentModel interface {
		Insert(ctx context.Context, data *Comment) (sql.Result, error)
		FindOne(ctx context.Context, commentId int64) (*Comment, error)
		FindOneByCommentIdUserId(ctx context.Context, commentId int64, userId int64) (*Comment, error)
		Update(ctx context.Context, data *Comment) error
		Delete(ctx context.Context, commentId int64) error
	}

	defaultCommentModel struct {
		sqlc.CachedConn
		table string
	}

	Comment struct {
		CommentId  int64     `db:"comment_id"`  // 自增id
		UserId     int64     `db:"user_id"`     // 用户id
		VideoId    int64     `db:"video_id"`    // 视频id
		CreateDate time.Time `db:"create_date"` // 创建日期
		Content    string    `db:"content"`     // 用户评论内容
		IsDeleted  string    `db:"is_deleted"`  // 0:未删除 1:已删除
	}
)

func newCommentModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultCommentModel {
	return &defaultCommentModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`comment`",
	}
}

func (m *defaultCommentModel) withSession(session sqlx.Session) *defaultCommentModel {
	return &defaultCommentModel{
		CachedConn: m.CachedConn.WithSession(session),
		table:      "`comment`",
	}
}

func (m *defaultCommentModel) Delete(ctx context.Context, commentId int64) error {
	data, err := m.FindOne(ctx, commentId)
	if err != nil {
		return err
	}

	commentCommentIdKey := fmt.Sprintf("%s%v", cacheCommentCommentIdPrefix, commentId)
	commentCommentIdUserIdKey := fmt.Sprintf("%s%v:%v", cacheCommentCommentIdUserIdPrefix, data.CommentId, data.UserId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `comment_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, commentId)
	}, commentCommentIdKey, commentCommentIdUserIdKey)
	return err
}

func (m *defaultCommentModel) FindOne(ctx context.Context, commentId int64) (*Comment, error) {
	commentCommentIdKey := fmt.Sprintf("%s%v", cacheCommentCommentIdPrefix, commentId)
	var resp Comment
	err := m.QueryRowCtx(ctx, &resp, commentCommentIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `comment_id` = ? limit 1", commentRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, commentId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCommentModel) FindOneByCommentIdUserId(ctx context.Context, commentId int64, userId int64) (*Comment, error) {
	commentCommentIdUserIdKey := fmt.Sprintf("%s%v:%v", cacheCommentCommentIdUserIdPrefix, commentId, userId)
	var resp Comment
	err := m.QueryRowIndexCtx(ctx, &resp, commentCommentIdUserIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `comment_id` = ? and `user_id` = ? limit 1", commentRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, commentId, userId); err != nil {
			return nil, err
		}
		return resp.CommentId, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCommentModel) Insert(ctx context.Context, data *Comment) (sql.Result, error) {
	commentCommentIdKey := fmt.Sprintf("%s%v", cacheCommentCommentIdPrefix, data.CommentId)
	commentCommentIdUserIdKey := fmt.Sprintf("%s%v:%v", cacheCommentCommentIdUserIdPrefix, data.CommentId, data.UserId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, commentRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.UserId, data.VideoId, data.CreateDate, data.Content, data.IsDeleted)
	}, commentCommentIdKey, commentCommentIdUserIdKey)
	return ret, err
}

func (m *defaultCommentModel) Update(ctx context.Context, newData *Comment) error {
	data, err := m.FindOne(ctx, newData.CommentId)
	if err != nil {
		return err
	}

	commentCommentIdKey := fmt.Sprintf("%s%v", cacheCommentCommentIdPrefix, data.CommentId)
	commentCommentIdUserIdKey := fmt.Sprintf("%s%v:%v", cacheCommentCommentIdUserIdPrefix, data.CommentId, data.UserId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `comment_id` = ?", m.table, commentRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.UserId, newData.VideoId, newData.CreateDate, newData.Content, newData.IsDeleted, newData.CommentId)
	}, commentCommentIdKey, commentCommentIdUserIdKey)
	return err
}

func (m *defaultCommentModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheCommentCommentIdPrefix, primary)
}

func (m *defaultCommentModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `comment_id` = ? limit 1", commentRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultCommentModel) tableName() string {
	return m.table
}
