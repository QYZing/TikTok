// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	followFieldNames          = builder.RawFieldNames(&Follow{})
	followRows                = strings.Join(followFieldNames, ",")
	followRowsExpectAutoSet   = strings.Join(stringx.Remove(followFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	followRowsWithPlaceHolder = strings.Join(stringx.Remove(followFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheFollowIdPrefix             = "cache:follow:id:"
	cacheFollowUserIdToUserIdPrefix = "cache:follow:userId:toUserId:"
)

type (
	followModel interface {
		Insert(ctx context.Context, data *Follow) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Follow, error)
		FindOneByUserIdToUserId(ctx context.Context, userId int64, toUserId int64) (*Follow, error)
		Update(ctx context.Context, data *Follow) error
		Delete(ctx context.Context, id int64) error
	}

	defaultFollowModel struct {
		sqlc.CachedConn
		table string
	}

	Follow struct {
		Id       int64  `db:"id"`         // 字段ID
		UserId   int64  `db:"user_id"`    // 用户ID
		ToUserId int64  `db:"to_user_id"` // 关注者ID
		Behavior string `db:"behavior"`   // 关注状态 2=>没关注 1=>关注
	}
)

func newFollowModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultFollowModel {
	return &defaultFollowModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`follow`",
	}
}

func (m *defaultFollowModel) withSession(session sqlx.Session) *defaultFollowModel {
	return &defaultFollowModel{
		CachedConn: m.CachedConn.WithSession(session),
		table:      "`follow`",
	}
}

func (m *defaultFollowModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	followIdKey := fmt.Sprintf("%s%v", cacheFollowIdPrefix, id)
	followUserIdToUserIdKey := fmt.Sprintf("%s%v:%v", cacheFollowUserIdToUserIdPrefix, data.UserId, data.ToUserId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, followIdKey, followUserIdToUserIdKey)
	return err
}

func (m *defaultFollowModel) FindOne(ctx context.Context, id int64) (*Follow, error) {
	followIdKey := fmt.Sprintf("%s%v", cacheFollowIdPrefix, id)
	var resp Follow
	err := m.QueryRowCtx(ctx, &resp, followIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", followRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultFollowModel) FindOneByUserIdToUserId(ctx context.Context, userId int64, toUserId int64) (*Follow, error) {
	followUserIdToUserIdKey := fmt.Sprintf("%s%v:%v", cacheFollowUserIdToUserIdPrefix, userId, toUserId)
	var resp Follow
	err := m.QueryRowIndexCtx(ctx, &resp, followUserIdToUserIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `user_id` = ? and `to_user_id` = ? limit 1", followRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, userId, toUserId); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultFollowModel) Insert(ctx context.Context, data *Follow) (sql.Result, error) {
	followIdKey := fmt.Sprintf("%s%v", cacheFollowIdPrefix, data.Id)
	followUserIdToUserIdKey := fmt.Sprintf("%s%v:%v", cacheFollowUserIdToUserIdPrefix, data.UserId, data.ToUserId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, followRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.UserId, data.ToUserId, data.Behavior)
	}, followIdKey, followUserIdToUserIdKey)
	return ret, err
}

func (m *defaultFollowModel) Update(ctx context.Context, newData *Follow) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	followIdKey := fmt.Sprintf("%s%v", cacheFollowIdPrefix, data.Id)
	followUserIdToUserIdKey := fmt.Sprintf("%s%v:%v", cacheFollowUserIdToUserIdPrefix, data.UserId, data.ToUserId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, followRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.UserId, newData.ToUserId, newData.Behavior, newData.Id)
	}, followIdKey, followUserIdToUserIdKey)
	return err
}

func (m *defaultFollowModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheFollowIdPrefix, primary)
}

func (m *defaultFollowModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", followRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultFollowModel) tableName() string {
	return m.table
}
