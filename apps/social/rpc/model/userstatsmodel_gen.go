// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userStatsFieldNames          = builder.RawFieldNames(&UserStats{})
	userStatsRows                = strings.Join(userStatsFieldNames, ",")
	userStatsRowsExpectAutoSet   = strings.Join(stringx.Remove(userStatsFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	userStatsRowsWithPlaceHolder = strings.Join(stringx.Remove(userStatsFieldNames, "`user_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheUserStatsUserIdPrefix = "cache:userStats:userId:"
)

type (
	userStatsModel interface {
		Insert(ctx context.Context, data *UserStats) (sql.Result, error)
		FindOne(ctx context.Context, userId int64) (*UserStats, error)
		Update(ctx context.Context, data *UserStats) error
		Delete(ctx context.Context, userId int64) error
	}

	defaultUserStatsModel struct {
		sqlc.CachedConn
		table string
	}

	UserStats struct {
		UserId        int64 `db:"user_id"`        // 用户ID
		FollowCount   int64 `db:"follow_count"`   // 关注数
		FollowerCount int64 `db:"follower_count"` // 粉丝数
	}
)

func newUserStatsModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultUserStatsModel {
	return &defaultUserStatsModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`user_stats`",
	}
}

func (m *defaultUserStatsModel) withSession(session sqlx.Session) *defaultUserStatsModel {
	return &defaultUserStatsModel{
		CachedConn: m.CachedConn.WithSession(session),
		table:      "`user_stats`",
	}
}

func (m *defaultUserStatsModel) Delete(ctx context.Context, userId int64) error {
	userStatsUserIdKey := fmt.Sprintf("%s%v", cacheUserStatsUserIdPrefix, userId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `user_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, userId)
	}, userStatsUserIdKey)
	return err
}

func (m *defaultUserStatsModel) FindOne(ctx context.Context, userId int64) (*UserStats, error) {
	userStatsUserIdKey := fmt.Sprintf("%s%v", cacheUserStatsUserIdPrefix, userId)
	var resp UserStats
	err := m.QueryRowCtx(ctx, &resp, userStatsUserIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `user_id` = ? limit 1", userStatsRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, userId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserStatsModel) Insert(ctx context.Context, data *UserStats) (sql.Result, error) {
	userStatsUserIdKey := fmt.Sprintf("%s%v", cacheUserStatsUserIdPrefix, data.UserId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, userStatsRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.UserId, data.FollowCount, data.FollowerCount)
	}, userStatsUserIdKey)
	return ret, err
}

func (m *defaultUserStatsModel) Update(ctx context.Context, data *UserStats) error {
	userStatsUserIdKey := fmt.Sprintf("%s%v", cacheUserStatsUserIdPrefix, data.UserId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `user_id` = ?", m.table, userStatsRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.FollowCount, data.FollowerCount, data.UserId)
	}, userStatsUserIdKey)
	return err
}

func (m *defaultUserStatsModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheUserStatsUserIdPrefix, primary)
}

func (m *defaultUserStatsModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `user_id` = ? limit 1", userStatsRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultUserStatsModel) tableName() string {
	return m.table
}
