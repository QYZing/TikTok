// Code generated by MockGen. DO NOT EDIT.
// Source: /home/bxd/bxdsh/TikTok/apps/interaction/rpc/interactionclient/interaction.go

// Package test is a generated GoMock package.
package mock

import (
	interactionclient "TikTok/apps/interaction/rpc/interactionclient"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockInteraction is a mock of Interaction interface.
type MockInteraction struct {
	ctrl     *gomock.Controller
	recorder *MockInteractionMockRecorder
}

// MockInteractionMockRecorder is the mock recorder for MockInteraction.
type MockInteractionMockRecorder struct {
	mock *MockInteraction
}

// NewMockInteraction creates a new mock instance.
func NewMockInteraction(ctrl *gomock.Controller) *MockInteraction {
	mock := &MockInteraction{ctrl: ctrl}
	mock.recorder = &MockInteractionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInteraction) EXPECT() *MockInteractionMockRecorder {
	return m.recorder
}

// GetCommentCountByVideoId mocks base method.
func (m *MockInteraction) GetCommentCountByVideoId(ctx context.Context, in *interactionclient.CommentCountByVideoIdReq, opts ...grpc.CallOption) (*interactionclient.CommentCountByVideoIdResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCommentCountByVideoId", varargs...)
	ret0, _ := ret[0].(*interactionclient.CommentCountByVideoIdResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommentCountByVideoId indicates an expected call of GetCommentCountByVideoId.
func (mr *MockInteractionMockRecorder) GetCommentCountByVideoId(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentCountByVideoId", reflect.TypeOf((*MockInteraction)(nil).GetCommentCountByVideoId), varargs...)
}

// GetCommentList mocks base method.
func (m *MockInteraction) GetCommentList(ctx context.Context, in *interactionclient.CommentListReq, opts ...grpc.CallOption) (*interactionclient.CommentListResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCommentList", varargs...)
	ret0, _ := ret[0].(*interactionclient.CommentListResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommentList indicates an expected call of GetCommentList.
func (mr *MockInteractionMockRecorder) GetCommentList(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentList", reflect.TypeOf((*MockInteraction)(nil).GetCommentList), varargs...)
}

// GetFavoriteCountByUserId mocks base method.
func (m *MockInteraction) GetFavoriteCountByUserId(ctx context.Context, in *interactionclient.FavoriteCountByUserIdReq, opts ...grpc.CallOption) (*interactionclient.FavoriteCountByUserIdResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFavoriteCountByUserId", varargs...)
	ret0, _ := ret[0].(*interactionclient.FavoriteCountByUserIdResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFavoriteCountByUserId indicates an expected call of GetFavoriteCountByUserId.
func (mr *MockInteractionMockRecorder) GetFavoriteCountByUserId(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFavoriteCountByUserId", reflect.TypeOf((*MockInteraction)(nil).GetFavoriteCountByUserId), varargs...)
}

// GetFavoriteCountByVideoId mocks base method.
func (m *MockInteraction) GetFavoriteCountByVideoId(ctx context.Context, in *interactionclient.FavoriteCountByVideoIdReq, opts ...grpc.CallOption) (*interactionclient.FavoriteCountByVideoIdResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFavoriteCountByVideoId", varargs...)
	ret0, _ := ret[0].(*interactionclient.FavoriteCountByVideoIdResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFavoriteCountByVideoId indicates an expected call of GetFavoriteCountByVideoId.
func (mr *MockInteractionMockRecorder) GetFavoriteCountByVideoId(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFavoriteCountByVideoId", reflect.TypeOf((*MockInteraction)(nil).GetFavoriteCountByVideoId), varargs...)
}

// GetFavoriteList mocks base method.
func (m *MockInteraction) GetFavoriteList(ctx context.Context, in *interactionclient.FavoriteListReq, opts ...grpc.CallOption) (*interactionclient.FavoriteListResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFavoriteList", varargs...)
	ret0, _ := ret[0].(*interactionclient.FavoriteListResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFavoriteList indicates an expected call of GetFavoriteList.
func (mr *MockInteractionMockRecorder) GetFavoriteList(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFavoriteList", reflect.TypeOf((*MockInteraction)(nil).GetFavoriteList), varargs...)
}

// IsFavorite mocks base method.
func (m *MockInteraction) IsFavorite(ctx context.Context, in *interactionclient.IsFavoriteReq, opts ...grpc.CallOption) (*interactionclient.IsFavoriteResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IsFavorite", varargs...)
	ret0, _ := ret[0].(*interactionclient.IsFavoriteResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsFavorite indicates an expected call of IsFavorite.
func (mr *MockInteractionMockRecorder) IsFavorite(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsFavorite", reflect.TypeOf((*MockInteraction)(nil).IsFavorite), varargs...)
}

// SendCommentAction mocks base method.
func (m *MockInteraction) SendCommentAction(ctx context.Context, in *interactionclient.CommentActionReq, opts ...grpc.CallOption) (*interactionclient.CommentActionResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendCommentAction", varargs...)
	ret0, _ := ret[0].(*interactionclient.CommentActionResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendCommentAction indicates an expected call of SendCommentAction.
func (mr *MockInteractionMockRecorder) SendCommentAction(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCommentAction", reflect.TypeOf((*MockInteraction)(nil).SendCommentAction), varargs...)
}

// SendFavoriteAction mocks base method.
func (m *MockInteraction) SendFavoriteAction(ctx context.Context, in *interactionclient.FavoriteActionReq, opts ...grpc.CallOption) (*interactionclient.FavoriteActionResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendFavoriteAction", varargs...)
	ret0, _ := ret[0].(*interactionclient.FavoriteActionResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendFavoriteAction indicates an expected call of SendFavoriteAction.
func (mr *MockInteractionMockRecorder) SendFavoriteAction(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendFavoriteAction", reflect.TypeOf((*MockInteraction)(nil).SendFavoriteAction), varargs...)
}
