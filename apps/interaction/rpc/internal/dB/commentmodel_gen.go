// Code generated by goctl. DO NOT EDIT.

package dB

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	commentFieldNames          = builder.RawFieldNames(&Comment{})
	commentRows                = strings.Join(commentFieldNames, ",")
	commentRowsExpectAutoSet   = strings.Join(stringx.Remove(commentFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	commentRowsWithPlaceHolder = strings.Join(stringx.Remove(commentFieldNames, "`commentId`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	commentModel interface {
		Insert(ctx context.Context, data *Comment) (sql.Result, error)
		FindOne(ctx context.Context, commentId int64) (*Comment, error)
		Update(ctx context.Context, data *Comment) error
		Delete(ctx context.Context, commentId int64) error
		Count(ctx context.Context , videoId int64)(int64 , error)
		CommentList(ctx context.Context , videoId int64)([]*Comment , error)
	}

	defaultCommentModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Comment struct {
		CommentId  int64     `db:"commentId"`
		UserId     int64     `db:"userId"`
		VideoId    int64     `db:"videoId"`
		CreateDate time.Time `db:"createDate"`
		Content    string    `db:"content"`
	}
)

func newCommentModel(conn sqlx.SqlConn) *defaultCommentModel {
	return &defaultCommentModel{
		conn:  conn,
		table: "`comment`",
	}
}

func (m *defaultCommentModel) withSession(session sqlx.Session) *defaultCommentModel {
	return &defaultCommentModel{
		conn:  sqlx.NewSqlConnFromSession(session),
		table: "`comment`",
	}
}

func (m *defaultCommentModel) Delete(ctx context.Context, commentId int64) error {
	query := fmt.Sprintf("delete from %s where `commentId` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, commentId)
	return err
}

func (m *defaultCommentModel) FindOne(ctx context.Context, commentId int64) (*Comment, error) {
	query := fmt.Sprintf("select %s from %s where `commentId` = ? limit 1", commentRows, m.table)
	resp := new(Comment)
	err := m.conn.QueryRowCtx(ctx, resp, query, commentId)
	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return resp, ErrNotFound
	default:
		return nil, err
	}
}
func (m *defaultCommentModel) Count(ctx context.Context , videoId int64)(int64 , error){
	query := fmt.Sprintf("select count(*) from %s where `videoId` = ? " , m.table)
	var resp int64 
	err := m.conn.QueryRowCtx(ctx, &resp, query, videoId)
	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return 0, ErrNotFound
	default:
		return 0, err
	}
}

func (m *defaultCommentModel) CommentList(ctx context.Context , videoId int64)([]*Comment , error){
	query := fmt.Sprintf("select * from %s where `videoId` = ? order by createDate desc " , m.table)
	resp := make([]*Comment , 0)
	err := m.conn.QueryRowsCtx(context.Background() ,&resp , query , videoId)
	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}
//数据库自动获取时间，插入不需要指定时间
func (m *defaultCommentModel) Insert(ctx context.Context, data *Comment) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, now(), ?)", m.table, commentRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.CommentId, data.UserId, data.VideoId, data.Content)
	return ret, err
}

func (m *defaultCommentModel) Update(ctx context.Context, data *Comment) error {
	query := fmt.Sprintf("update %s set %s where `commentId` = ?", m.table, commentRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.UserId, data.VideoId, data.CreateDate, data.Content, data.CommentId)
	return err
}

func (m *defaultCommentModel) tableName() string {
	return m.table
}
