// Code generated by goctl. DO NOT EDIT.
// Source: video.proto

package server

import (
	"context"

	"rpc/apps/video/rpc/internal/logic"
	"rpc/apps/video/rpc/internal/svc"
	"rpc/apps/video/rpc/video"
)

type VideoServer struct {
	svcCtx *svc.ServiceContext
	video.UnimplementedVideoServer
}

func NewVideoServer(svcCtx *svc.ServiceContext) *VideoServer {
	return &VideoServer{
		svcCtx: svcCtx,
	}
}

func (s *VideoServer) GetWorkCountByUserId(ctx context.Context, in *video.WorkCountByUserIdReq) (*video.WorkCountByUserIdResp, error) {
	l := logic.NewGetWorkCountByUserIdLogic(ctx, s.svcCtx)
	return l.GetWorkCountByUserId(in)
}

func (s *VideoServer) GetFeed(ctx context.Context, in *video.FeedReq) (*video.FeedResp, error) {
	l := logic.NewGetFeedLogic(ctx, s.svcCtx)
	return l.GetFeed(in)
}

func (s *VideoServer) SendPublishAction(ctx context.Context, in *video.PublishActionReq) (*video.PublishActionResp, error) {
	l := logic.NewSendPublishActionLogic(ctx, s.svcCtx)
	return l.SendPublishAction(in)
}

func (s *VideoServer) GetPublishList(ctx context.Context, in *video.PublishListReq) (*video.PublishListResp, error) {
	l := logic.NewGetPublishListLogic(ctx, s.svcCtx)
	return l.GetPublishList(in)
}

func (s *VideoServer) Detail(ctx context.Context, in *video.BasicVideoInfoReq) (*video.BasicVideoInfoResp, error) {
	l := logic.NewDetailLogic(ctx, s.svcCtx)
	return l.Detail(in)
}
