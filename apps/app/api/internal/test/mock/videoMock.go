// Code generated by MockGen. DO NOT EDIT.
// Source: /home/bxd/bxdsh/TikTok/apps/video/rpc/videoclient/video.go

// Package test is a generated GoMock package.
package mock

import (
	videoclient "TikTok/apps/video/rpc/videoclient"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockVideo is a mock of Video interface.
type MockVideo struct {
	ctrl     *gomock.Controller
	recorder *MockVideoMockRecorder
}

// MockVideoMockRecorder is the mock recorder for MockVideo.
type MockVideoMockRecorder struct {
	mock *MockVideo
}

// NewMockVideo creates a new mock instance.
func NewMockVideo(ctrl *gomock.Controller) *MockVideo {
	mock := &MockVideo{ctrl: ctrl}
	mock.recorder = &MockVideoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVideo) EXPECT() *MockVideoMockRecorder {
	return m.recorder
}

// Detail mocks base method.
func (m *MockVideo) Detail(ctx context.Context, in *videoclient.BasicVideoInfoReq, opts ...grpc.CallOption) (*videoclient.BasicVideoInfoResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Detail", varargs...)
	ret0, _ := ret[0].(*videoclient.BasicVideoInfoResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Detail indicates an expected call of Detail.
func (mr *MockVideoMockRecorder) Detail(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Detail", reflect.TypeOf((*MockVideo)(nil).Detail), varargs...)
}

// GetFeed mocks base method.
func (m *MockVideo) GetFeed(ctx context.Context, in *videoclient.FeedReq, opts ...grpc.CallOption) (*videoclient.FeedResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFeed", varargs...)
	ret0, _ := ret[0].(*videoclient.FeedResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFeed indicates an expected call of GetFeed.
func (mr *MockVideoMockRecorder) GetFeed(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeed", reflect.TypeOf((*MockVideo)(nil).GetFeed), varargs...)
}

// GetPublishList mocks base method.
func (m *MockVideo) GetPublishList(ctx context.Context, in *videoclient.PublishListReq, opts ...grpc.CallOption) (*videoclient.PublishListResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPublishList", varargs...)
	ret0, _ := ret[0].(*videoclient.PublishListResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublishList indicates an expected call of GetPublishList.
func (mr *MockVideoMockRecorder) GetPublishList(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublishList", reflect.TypeOf((*MockVideo)(nil).GetPublishList), varargs...)
}

// GetWorkCountByUserId mocks base method.
func (m *MockVideo) GetWorkCountByUserId(ctx context.Context, in *videoclient.WorkCountByUserIdReq, opts ...grpc.CallOption) (*videoclient.WorkCountByUserIdResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetWorkCountByUserId", varargs...)
	ret0, _ := ret[0].(*videoclient.WorkCountByUserIdResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkCountByUserId indicates an expected call of GetWorkCountByUserId.
func (mr *MockVideoMockRecorder) GetWorkCountByUserId(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkCountByUserId", reflect.TypeOf((*MockVideo)(nil).GetWorkCountByUserId), varargs...)
}

// SendPublishAction mocks base method.
func (m *MockVideo) SendPublishAction(ctx context.Context, in *videoclient.PublishActionReq, opts ...grpc.CallOption) (*videoclient.PublishActionResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendPublishAction", varargs...)
	ret0, _ := ret[0].(*videoclient.PublishActionResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendPublishAction indicates an expected call of SendPublishAction.
func (mr *MockVideoMockRecorder) SendPublishAction(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendPublishAction", reflect.TypeOf((*MockVideo)(nil).SendPublishAction), varargs...)
}
