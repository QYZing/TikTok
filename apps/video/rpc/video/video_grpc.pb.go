// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: video.proto

package video

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Video_GetWorkCountByUserId_FullMethodName = "/video.Video/GetWorkCountByUserId"
	Video_GetFeed_FullMethodName              = "/video.Video/GetFeed"
	Video_SendPublishAction_FullMethodName    = "/video.Video/SendPublishAction"
	Video_GetPublishList_FullMethodName       = "/video.Video/GetPublishList"
	Video_Detail_FullMethodName               = "/video.Video/Detail"
)

// VideoClient is the client API for Video service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VideoClient interface {
	GetWorkCountByUserId(ctx context.Context, in *WorkCountByUserIdReq, opts ...grpc.CallOption) (*WorkCountByUserIdResp, error)
	GetFeed(ctx context.Context, in *FeedReq, opts ...grpc.CallOption) (*FeedResp, error)
	SendPublishAction(ctx context.Context, in *PublishActionReq, opts ...grpc.CallOption) (*PublishActionResp, error)
	GetPublishList(ctx context.Context, in *PublishListReq, opts ...grpc.CallOption) (*PublishListResp, error)
	Detail(ctx context.Context, in *BasicVideoInfoReq, opts ...grpc.CallOption) (*BasicVideoInfoResp, error)
}

type videoClient struct {
	cc grpc.ClientConnInterface
}

func NewVideoClient(cc grpc.ClientConnInterface) VideoClient {
	return &videoClient{cc}
}

func (c *videoClient) GetWorkCountByUserId(ctx context.Context, in *WorkCountByUserIdReq, opts ...grpc.CallOption) (*WorkCountByUserIdResp, error) {
	out := new(WorkCountByUserIdResp)
	err := c.cc.Invoke(ctx, Video_GetWorkCountByUserId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoClient) GetFeed(ctx context.Context, in *FeedReq, opts ...grpc.CallOption) (*FeedResp, error) {
	out := new(FeedResp)
	err := c.cc.Invoke(ctx, Video_GetFeed_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoClient) SendPublishAction(ctx context.Context, in *PublishActionReq, opts ...grpc.CallOption) (*PublishActionResp, error) {
	out := new(PublishActionResp)
	err := c.cc.Invoke(ctx, Video_SendPublishAction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoClient) GetPublishList(ctx context.Context, in *PublishListReq, opts ...grpc.CallOption) (*PublishListResp, error) {
	out := new(PublishListResp)
	err := c.cc.Invoke(ctx, Video_GetPublishList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoClient) Detail(ctx context.Context, in *BasicVideoInfoReq, opts ...grpc.CallOption) (*BasicVideoInfoResp, error) {
	out := new(BasicVideoInfoResp)
	err := c.cc.Invoke(ctx, Video_Detail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VideoServer is the server API for Video service.
// All implementations must embed UnimplementedVideoServer
// for forward compatibility
type VideoServer interface {
	GetWorkCountByUserId(context.Context, *WorkCountByUserIdReq) (*WorkCountByUserIdResp, error)
	GetFeed(context.Context, *FeedReq) (*FeedResp, error)
	SendPublishAction(context.Context, *PublishActionReq) (*PublishActionResp, error)
	GetPublishList(context.Context, *PublishListReq) (*PublishListResp, error)
	Detail(context.Context, *BasicVideoInfoReq) (*BasicVideoInfoResp, error)
	mustEmbedUnimplementedVideoServer()
}

// UnimplementedVideoServer must be embedded to have forward compatible implementations.
type UnimplementedVideoServer struct {
}

func (UnimplementedVideoServer) GetWorkCountByUserId(context.Context, *WorkCountByUserIdReq) (*WorkCountByUserIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkCountByUserId not implemented")
}
func (UnimplementedVideoServer) GetFeed(context.Context, *FeedReq) (*FeedResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeed not implemented")
}
func (UnimplementedVideoServer) SendPublishAction(context.Context, *PublishActionReq) (*PublishActionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPublishAction not implemented")
}
func (UnimplementedVideoServer) GetPublishList(context.Context, *PublishListReq) (*PublishListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPublishList not implemented")
}
func (UnimplementedVideoServer) Detail(context.Context, *BasicVideoInfoReq) (*BasicVideoInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Detail not implemented")
}
func (UnimplementedVideoServer) mustEmbedUnimplementedVideoServer() {}

// UnsafeVideoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VideoServer will
// result in compilation errors.
type UnsafeVideoServer interface {
	mustEmbedUnimplementedVideoServer()
}

func RegisterVideoServer(s grpc.ServiceRegistrar, srv VideoServer) {
	s.RegisterService(&Video_ServiceDesc, srv)
}

func _Video_GetWorkCountByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkCountByUserIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServer).GetWorkCountByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Video_GetWorkCountByUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServer).GetWorkCountByUserId(ctx, req.(*WorkCountByUserIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Video_GetFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeedReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServer).GetFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Video_GetFeed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServer).GetFeed(ctx, req.(*FeedReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Video_SendPublishAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishActionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServer).SendPublishAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Video_SendPublishAction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServer).SendPublishAction(ctx, req.(*PublishActionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Video_GetPublishList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServer).GetPublishList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Video_GetPublishList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServer).GetPublishList(ctx, req.(*PublishListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Video_Detail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BasicVideoInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServer).Detail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Video_Detail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServer).Detail(ctx, req.(*BasicVideoInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Video_ServiceDesc is the grpc.ServiceDesc for Video service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Video_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "video.Video",
	HandlerType: (*VideoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetWorkCountByUserId",
			Handler:    _Video_GetWorkCountByUserId_Handler,
		},
		{
			MethodName: "GetFeed",
			Handler:    _Video_GetFeed_Handler,
		},
		{
			MethodName: "SendPublishAction",
			Handler:    _Video_SendPublishAction_Handler,
		},
		{
			MethodName: "GetPublishList",
			Handler:    _Video_GetPublishList_Handler,
		},
		{
			MethodName: "Detail",
			Handler:    _Video_Detail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "video.proto",
}
