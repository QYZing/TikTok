// Code generated by goctl. DO NOT EDIT.
// Source: video.proto

package videoclient

import (
	"context"

	"rpc/apps/video/rpc/video"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	BasicVideoInfo        = video.BasicVideoInfo
	BasicVideoInfoReq     = video.BasicVideoInfoReq
	BasicVideoInfoResp    = video.BasicVideoInfoResp
	FeedReq               = video.FeedReq
	FeedResp              = video.FeedResp
	PublishActionReq      = video.PublishActionReq
	PublishActionResp     = video.PublishActionResp
	PublishListReq        = video.PublishListReq
	PublishListResp       = video.PublishListResp
	WorkCountByUserIdReq  = video.WorkCountByUserIdReq
	WorkCountByUserIdResp = video.WorkCountByUserIdResp

	Video interface {
		GetWorkCountByUserId(ctx context.Context, in *WorkCountByUserIdReq, opts ...grpc.CallOption) (*WorkCountByUserIdResp, error)
		GetFeed(ctx context.Context, in *FeedReq, opts ...grpc.CallOption) (*FeedResp, error)
		SendPublishAction(ctx context.Context, in *PublishActionReq, opts ...grpc.CallOption) (*PublishActionResp, error)
		GetPublishList(ctx context.Context, in *PublishListReq, opts ...grpc.CallOption) (*PublishListResp, error)
		Detail(ctx context.Context, in *BasicVideoInfoReq, opts ...grpc.CallOption) (*BasicVideoInfoResp, error)
	}

	defaultVideo struct {
		cli zrpc.Client
	}
)

func NewVideo(cli zrpc.Client) Video {
	return &defaultVideo{
		cli: cli,
	}
}

func (m *defaultVideo) GetWorkCountByUserId(ctx context.Context, in *WorkCountByUserIdReq, opts ...grpc.CallOption) (*WorkCountByUserIdResp, error) {
	client := video.NewVideoClient(m.cli.Conn())
	return client.GetWorkCountByUserId(ctx, in, opts...)
}

func (m *defaultVideo) GetFeed(ctx context.Context, in *FeedReq, opts ...grpc.CallOption) (*FeedResp, error) {
	client := video.NewVideoClient(m.cli.Conn())
	return client.GetFeed(ctx, in, opts...)
}

func (m *defaultVideo) SendPublishAction(ctx context.Context, in *PublishActionReq, opts ...grpc.CallOption) (*PublishActionResp, error) {
	client := video.NewVideoClient(m.cli.Conn())
	return client.SendPublishAction(ctx, in, opts...)
}

func (m *defaultVideo) GetPublishList(ctx context.Context, in *PublishListReq, opts ...grpc.CallOption) (*PublishListResp, error) {
	client := video.NewVideoClient(m.cli.Conn())
	return client.GetPublishList(ctx, in, opts...)
}

func (m *defaultVideo) Detail(ctx context.Context, in *BasicVideoInfoReq, opts ...grpc.CallOption) (*BasicVideoInfoResp, error) {
	client := video.NewVideoClient(m.cli.Conn())
	return client.Detail(ctx, in, opts...)
}
