// Code generated by goctl. DO NOT EDIT.
// Source: social.proto

package socialclient

import (
	"context"

	"TikTok/apps/social/rpc/social"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	FollowCountReq           = social.FollowCountReq
	FollowCountResp          = social.FollowCountResp
	FollowerCountReq         = social.FollowerCountReq
	FollowerCountResp        = social.FollowerCountResp
	FriendUser               = social.FriendUser
	IsFollowReq              = social.IsFollowReq
	IsFollowResp             = social.IsFollowResp
	Message                  = social.Message
	MessageActionReq         = social.MessageActionReq
	MessageActionResp        = social.MessageActionResp
	MessageChatReq           = social.MessageChatReq
	MessageChatResp          = social.MessageChatResp
	RelationActionReq        = social.RelationActionReq
	RelationActionResp       = social.RelationActionResp
	RelationFollowListReq    = social.RelationFollowListReq
	RelationFollowListResp   = social.RelationFollowListResp
	RelationFollowerListReq  = social.RelationFollowerListReq
	RelationFollowerListResp = social.RelationFollowerListResp
	RelationFriendListReq    = social.RelationFriendListReq
	RelationFriendListResp   = social.RelationFriendListResp

	Social interface {
		IsFollow(ctx context.Context, in *IsFollowReq, opts ...grpc.CallOption) (*IsFollowResp, error)
		GetFollowCount(ctx context.Context, in *FollowCountReq, opts ...grpc.CallOption) (*FollowCountResp, error)
		GetFollowerCount(ctx context.Context, in *FollowerCountReq, opts ...grpc.CallOption) (*FollowerCountResp, error)
		SendRelationAction(ctx context.Context, in *RelationActionReq, opts ...grpc.CallOption) (*RelationActionResp, error)
		GetRelationFollowList(ctx context.Context, in *RelationFollowListReq, opts ...grpc.CallOption) (*RelationFollowListResp, error)
		GetRelationFollowerList(ctx context.Context, in *RelationFollowerListReq, opts ...grpc.CallOption) (*RelationFollowerListResp, error)
		GetRelationFriendList(ctx context.Context, in *RelationFriendListReq, opts ...grpc.CallOption) (*RelationFriendListResp, error)
		GetMessages(ctx context.Context, in *MessageChatReq, opts ...grpc.CallOption) (*MessageChatResp, error)
		SendMessageAction(ctx context.Context, in *MessageActionReq, opts ...grpc.CallOption) (*MessageActionResp, error)
	}

	defaultSocial struct {
		cli zrpc.Client
	}
)

func NewSocial(cli zrpc.Client) Social {
	return &defaultSocial{
		cli: cli,
	}
}

func (m *defaultSocial) IsFollow(ctx context.Context, in *IsFollowReq, opts ...grpc.CallOption) (*IsFollowResp, error) {
	client := social.NewSocialClient(m.cli.Conn())
	return client.IsFollow(ctx, in, opts...)
}

func (m *defaultSocial) GetFollowCount(ctx context.Context, in *FollowCountReq, opts ...grpc.CallOption) (*FollowCountResp, error) {
	client := social.NewSocialClient(m.cli.Conn())
	return client.GetFollowCount(ctx, in, opts...)
}

func (m *defaultSocial) GetFollowerCount(ctx context.Context, in *FollowerCountReq, opts ...grpc.CallOption) (*FollowerCountResp, error) {
	client := social.NewSocialClient(m.cli.Conn())
	return client.GetFollowerCount(ctx, in, opts...)
}

func (m *defaultSocial) SendRelationAction(ctx context.Context, in *RelationActionReq, opts ...grpc.CallOption) (*RelationActionResp, error) {
	client := social.NewSocialClient(m.cli.Conn())
	return client.SendRelationAction(ctx, in, opts...)
}

func (m *defaultSocial) GetRelationFollowList(ctx context.Context, in *RelationFollowListReq, opts ...grpc.CallOption) (*RelationFollowListResp, error) {
	client := social.NewSocialClient(m.cli.Conn())
	return client.GetRelationFollowList(ctx, in, opts...)
}

func (m *defaultSocial) GetRelationFollowerList(ctx context.Context, in *RelationFollowerListReq, opts ...grpc.CallOption) (*RelationFollowerListResp, error) {
	client := social.NewSocialClient(m.cli.Conn())
	return client.GetRelationFollowerList(ctx, in, opts...)
}

func (m *defaultSocial) GetRelationFriendList(ctx context.Context, in *RelationFriendListReq, opts ...grpc.CallOption) (*RelationFriendListResp, error) {
	client := social.NewSocialClient(m.cli.Conn())
	return client.GetRelationFriendList(ctx, in, opts...)
}

func (m *defaultSocial) GetMessages(ctx context.Context, in *MessageChatReq, opts ...grpc.CallOption) (*MessageChatResp, error) {
	client := social.NewSocialClient(m.cli.Conn())
	return client.GetMessages(ctx, in, opts...)
}

func (m *defaultSocial) SendMessageAction(ctx context.Context, in *MessageActionReq, opts ...grpc.CallOption) (*MessageActionResp, error) {
	client := social.NewSocialClient(m.cli.Conn())
	return client.SendMessageAction(ctx, in, opts...)
}
